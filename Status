* 08.18.2014
  Start to define the register specification for Texture unit, Vertex Shader, Vertex Streamer. 
  Start and finish the RTL coding for register block of Texture Unit.
* 08.19.2014
  Start the RTL coding for the Vertex Streamer 
  LineCount=3514
* 08.20.2014
  Finish the most part the Vertex Streamer, starting the RTL coding for StreamerFetch in Streamer. 
  Since the Streamer will send StreamerControlCommand to SFT and SLU or other subblocks and the SFT can aslo send the StreamerControlCommand to SLU, there should be a broadcast bus in the Streamer to chain the subblocks. 
  Each block has receiver and transmitter. If the dest_id is the block, it will receive the request.
  Need to finish the SFT subblock specification and diagram. 
  LineCount=4067
* 08.21.2014
  Finish the Command Broadcast Bus with AXI protocol.
  Start the RTL coding for Command Processor receiving AGP transaction from CPU.  Start the Specification of CP. 
  LineCount=4900
* 08.22.2014
  Continue the RTL coding for Command Processor. All the register via AGP arriving CP will dispatch to different blocks. The relation is 1 to N.
  Continue the CP specification. 
  LineCount=5423
* 08.25.2014
  Start the Command Processor RTL verification via UVM from Mentor Graphics. 
  Register address space is done in GART_GPU_register.xlsx in Register Address Space tab. 
  UVMLineCount=530 
* 08.26.2014
  CmdProcessor 's UVM TB is already. However, the RTL debug is very complex and tedious. One time over one time. 
 *08.27.2014
   CmdProcessor register dispatch is OK. Focus on the memory request path.
  LineCount=6270
* 08.28.2014
  I never have the experience in the parallel logic design and architecture. Now the ShaderFetch is the such architecture. Interesting!
  Study the ShaderFetch,ShaderInstruction,ShaderEmulator. Learning process is very hard since you are absorbing new knowledge. 

* 09.02.2014
  Shader Input RTL coding for NEW_PROGRAM command received fro Command processor and send AXI memory request to MC and load the data into the 64MB instruction memory.  Wait the UVM TB to verify
  LineCount=6954
* 09.03.2014
  Debug the UVM TB to verify the Shader Fetch. 
  UVMLineCount=1433
* 09.04.2014
  Shader.ShaderFetch.AXI(MC) is done.
  Shader.ShaderFetch.AHB(NEW_PROGRAM) is done
  Shader.ShaderFetch.AHB(ShaderInput) is doing.
* 09.05.2014
  Shader Fetch has many threads forming a group. Each thread has the PC, how to map the PC to the ShaderInput is a question.
* 09.10.2014
  Rewrite the Shader Fetch thread table control logic with main-child FSM
* 09.11.2014
  New architecture of Shader Fetch is done and RTL is done. Need verification. 
* 09.15.204
  Start the shader decode RTL coding
* 09.16.204
  Shader Register file RTL coding is done, not verified. It support the two groups of 4x32bit reigster data ouput, thus the ALU has 4.
* 09.17.2014
  Start the Shader_Execute-Shader_Core-General_ALU coding.
* 09.19.2014
  Create the uvm tb for the float point arithmetic. 
* 09.20.2014
  After the reset_gen is called in reset_phase, the simulus is right. 
* 09.21.2014
  Create the domain name:grision.com contains the graphics vision. Starting the project and hope some investers can offer money to kick off the project.
* 09.22.2014
  Float point arithmetic is done, integer arithmetic is doing. Divide algorithm is still in investigation.
* 09.24.2014
  Start the Shader_Vector_ALU coding. 
* 09.28.2014
  Start the Grision_Compiler to extract the instruction from the OpenGL language. 
* 09.30.2014
  Start the streamer block coding, streamer register block is doing.
* 10.1.2014
  Continue the the RTL coding for the Streamer Load Unit.
* 10.3.2014
  Streamer Register block RTL is done.
* 10.09.2014
  Streamer Fetch RTL coding
* 10.10.2014
  Streamer Output Cache RTL coding. Put the assign expression into the sequntial logic. The for loop needs a FSM to implement. 
  RTL LineCount =15181
* 10.10.2014
  Finish the RTL Coding for Streamer Output Cache. Start the RTL coding for the Cache_4Way in Streamer Load Unit.
* 10.13.2014
  Adding the Cach in Streamer Load Unit
